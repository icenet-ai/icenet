@startuml classes_icenet
set namespaceSeparator none
class "AMSR2PreProcessor" as icenet.data.processors.amsr.AMSR2PreProcessor #99DDFF {
}
class "BaseNetwork" as icenet.model.networks.base.BaseNetwork #44BB99 {
  callbacks
  dataset
  model_path
  network_folder
  run_name
  seed
  add_callback(callback)
  get_default_callbacks()
  {abstract}predict()
  {abstract}train(epochs: int, model_creator: callable, train_dataset: object, model_creator_kwargs: dict, save: bool)
}
class "BatchwiseModelCheckpoint" as icenet.model.callbacks.BatchwiseModelCheckpoint #44BB99 {
  best
  mode : object
  model_path : object
  monitor : object
  sample_at_zero : object
  save_frequency : object
  on_train_batch_end(batch: object, logs: object)
}
class "CMIP6PreProcessor" as icenet.data.processors.cmip.CMIP6PreProcessor #99DDFF {
  pre_normalisation(var_name: str, da: object)
}
class "ConstructLeadtimeAccuracy" as icenet.model.metrics.ConstructLeadtimeAccuracy #44BB99 {
  single_forecast_leadtime_idx : Optional[object]
  use_all_forecast_months : bool
  from_config(config: object)
  get_config()
  result()
  update_state(y_true: object, y_pred: object, sample_weight: object)
}
class "CosProcessor" as icenet.data.meta.CosProcessor #99DDFF {
}
class "<color:red>CredentialsNotFoundError</color>" as icenet.exceptions.CredentialsNotFoundError #77AADD {
  message : str
}
class "DaskBaseDataLoader" as icenet.data.loaders.dask.DaskBaseDataLoader #99DDFF {
  {abstract}client_generate(client: object, dates_override: object, pickup: bool) -> None
  generate() -> None
}
class "DaskMultiSharingWorkerLoader" as icenet.data.loaders.dask.DaskMultiSharingWorkerLoader #99DDFF {
  {abstract}client_generate(client: object, dates_override: object, pickup: bool)
  {abstract}generate_sample(date: object, prediction: bool)
}
class "DaskMultiWorkerLoader" as icenet.data.loaders.dask.DaskMultiWorkerLoader #99DDFF {
  client_generate(client: object, dates_override: object, pickup: bool)
  generate_sample(date: object, prediction: bool, parallel)
}
class "ERA5PreProcessor" as icenet.data.processors.cds.ERA5PreProcessor #99DDFF {
  pre_normalisation(var_name: str, da: object)
}
class "ForecastPlotArgParser" as icenet.plotting.forecast.ForecastPlotArgParser #BBCC33 {
  allow_ecmwf()
  allow_metrics()
  allow_probes()
  allow_sie()
  allow_threshold()
  parse_args()
}
class "GenerateArgParser" as icenet.data.references.osisaf.GenerateArgParser #99DDFF {
}
class "Hemisphere" as icenet.utils.Hemisphere #77AADD {
  name
}
class "HemisphereMixin" as icenet.utils.HemisphereMixin #77AADD {
  both
  hemisphere
  hemisphere_loc
  hemisphere_str
  north
  south
}
class "HorovodNetwork" as icenet.model.networks.tensorflow.HorovodNetwork #44BB99 {
  get_default_callbacks()
  train(epochs: int, model_creator: callable, train_dataset: object, model_creator_kwargs: dict, save: bool, validation_dataset: object)
}
class "IceNetBaseDataLoader" as icenet.data.loaders.base.IceNetBaseDataLoader #99DDFF {
  channel_names
  config
  dates_override
  north
  num_channels
  pickup
  south
  workers
  {abstract}generate_sample(date: object, prediction: bool)
  get_data_var_folder(var_name: str, append: object, missing_error: bool) -> os.PathLike
  get_sample_files() -> object
  write_dataset_config_only()
}
class "IceNetDataLoader" as icenet.data.loaders.stdlib.IceNetDataLoader #99DDFF {
  {abstract}generate()
  {abstract}generate_sample(date: object, prediction: bool)
}
class "IceNetDataLoaderFactory" as icenet.data.loaders.IceNetDataLoaderFactory #99DDFF {
  loader_map
  add_data_loader(loader_name: str, loader_impl: object) -> None
  create_data_loader(loader_name) -> object
}
class "IceNetDataSet" as icenet.data.network_dataset.IceNetDataSet #99DDFF {
  channels
  counts
  loader_config
  get_data_loader(lead_time: object, generate_workers: object) -> object
}
class "IceNetDataSetPyTorch" as icenet.data.network_dataset.IceNetDataSetPyTorch #99DDFF {
  dates
}
class "<color:red>IceNetDataWarning</color>" as icenet.data.loaders.utils.IceNetDataWarning #99DDFF {
}
class "IceNetPreTrainingEvaluator" as icenet.model.callbacks.IceNetPreTrainingEvaluator #44BB99 {
  sample_at_zero : bool
  val_dataloader
  validation_frequency
  on_train_batch_end(batch: object, logs: object)
}
class "LogFormat" as icenet.utils.LogFormat #77AADD {
  date_format : str
  formatter : Formatter
  str_format : str
}
class "MaskDatasetConfig" as icenet.data.masks.osisaf.MaskDatasetConfig #99DDFF {
  config
  get_config(config_funcs: dict, strip_keys: list)
  save_data_for_config(rename_var_list: dict, source_ds: object, source_files: list, time_dim_values: list, var_filter_list: list)
}
class "Masks" as icenet.data.masks.osisaf.Masks #99DDFF {
  active_grid_cell_filename
  land_filename
  land_map_filename
  polarhole_filename
  region
  active_grid_cell(date)
  get_active_cell_da(src_da: object) -> object
  get_blank_mask() -> object
  get_config(config_funcs: dict, strip_keys: list)
  inactive_grid_cell(date)
  land()
  polarhole(date)
  process()
  reset_region()
}
class "MergedIceNetDataSet" as icenet.data.network_dataset.MergedIceNetDataSet #99DDFF {
  channels
  counts
  {abstract}check_dataset(split: str)
  get_data_loader()
}
class "PeriodProcessor" as icenet.data.meta.PeriodProcessor #99DDFF {
  get_config(config_funcs: dict, strip_keys: list)
  process()
}
class "SICPreProcessor" as icenet.data.processors.osisaf.SICPreProcessor #99DDFF {
  pre_normalisation(var_name: str, da: object)
}
class "SinProcessor" as icenet.data.meta.SinProcessor #99DDFF {
}
class "SplittingMixin" as icenet.data.datasets.splitting.SplittingMixin #99DDFF {
  batch_size
  dtype
  lead_time
  num_channels
  shape
  shuffling
  test_fns : list
  train_fns : list
  val_fns : list
  add_records(base_path: str) -> None
  check_dataset(split: str) -> None
  get_split_datasets(ratio: object)
}
class "TemperatureScale" as icenet.model.utils.TemperatureScale #44BB99 {
  temp
  call(inputs: object)
  get_config()
}
class "TensorflowNetwork" as icenet.model.networks.tensorflow.TensorflowNetwork #44BB99 {
  get_default_callbacks()
  train(epochs: int, model_creator: callable, train_dataset: object, model_creator_kwargs: dict, save: bool, validation_dataset: object)
}
class "TrainingArgParser" as icenet.model.cli.TrainingArgParser #44BB99 {
  add_horovod()
  add_tensorflow()
  add_unet()
  add_wandb()
  parse_args()
}
class "WeightedBinaryAccuracy" as icenet.model.metrics.WeightedBinaryAccuracy #44BB99 {
  get_config()
  result()
  update_state(y_true: object, y_pred: object, sample_weight: object)
}
class "WeightedMAE" as icenet.model.metrics.WeightedMAE #44BB99 {
  result()
  update_state(y_true: object, y_pred: object, sample_weight: object)
}
class "WeightedMSE" as icenet.model.losses.WeightedMSE #44BB99 {
}
class "WeightedMSE" as icenet.model.metrics.WeightedMSE #44BB99 {
  result()
  update_state(y_true: object, y_pred: object, sample_weight: object)
}
class "WeightedRMSE" as icenet.model.metrics.WeightedRMSE #44BB99 {
  result()
  update_state(y_true: object, y_pred: object, sample_weight: object)
}
icenet.data.loaders.dask.DaskBaseDataLoader --|> icenet.data.loaders.base.IceNetBaseDataLoader
icenet.data.loaders.dask.DaskMultiSharingWorkerLoader --|> icenet.data.loaders.dask.DaskBaseDataLoader
icenet.data.loaders.dask.DaskMultiWorkerLoader --|> icenet.data.loaders.dask.DaskBaseDataLoader
icenet.data.loaders.stdlib.IceNetDataLoader --|> icenet.data.loaders.base.IceNetBaseDataLoader
icenet.data.meta.CosProcessor --|> icenet.data.meta.PeriodProcessor
icenet.data.meta.SinProcessor --|> icenet.data.meta.PeriodProcessor
icenet.data.network_dataset.IceNetDataSet --|> icenet.data.datasets.splitting.SplittingMixin
icenet.data.network_dataset.IceNetDataSetPyTorch --|> icenet.data.network_dataset.IceNetDataSet
icenet.data.network_dataset.MergedIceNetDataSet --|> icenet.data.datasets.splitting.SplittingMixin
icenet.model.networks.tensorflow.HorovodNetwork --|> icenet.model.networks.tensorflow.TensorflowNetwork
icenet.model.networks.tensorflow.TensorflowNetwork --|> icenet.model.networks.base.BaseNetwork
icenet.data.loaders.dask.DaskMultiWorkerLoader --* icenet.data.network_dataset.IceNetDataSetPyTorch : _dl
@enduml
